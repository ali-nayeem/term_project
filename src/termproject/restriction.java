/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * restriction.java
 *
 * Created on Jun 18, 2009, 10:41:48 PM
 */

package termproject;

import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import java.io.*;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class restriction extends javax.swing.JFrame {
    TableModel model;
    String selectedExe=null;

    /** Creates new form restriction */
    public restriction() {
        initComponents();
        mycode();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "         Restricted Processes"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jButton1)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(selectedExe!=null){
                  // model.clearExe(jTable1.getSelectedRow());
                   deleteExe(selectedExe);
                   selectedExe=null;
                   model.clearExe(jTable1.getSelectedRow());
               }
               else
                   JOptionPane.showMessageDialog(null,"Select an Exe","Error",JOptionPane.ERROR_MESSAGE);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        selectedExe=(String)(jTable1.getValueAt(jTable1.getSelectedRow(),0));
        System.out.println(selectedExe);
    }//GEN-LAST:event_jTable1MouseClicked

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            }
            catch (ClassNotFoundException e) {
            }
            catch (InstantiationException e) {
            }
            catch (IllegalAccessException e) {
            }
            catch (UnsupportedLookAndFeelException e) {
            }
                new turnoff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void mycode() {
        model=new TableModel();
        jTable1.setModel(model);
        
        
        try {
                 FileReader fin=null;
                 fin = new FileReader("Exe.dat");
                 BufferedReader br=new BufferedReader(fin);
                 String line;
                 while((line=br.readLine())!=null){
                      model.addExe(line);
                   }
                  fin.close();
                }catch(IOException error){
                    System.out.println(error);
                  createError("Unable To Read File");
                }
    }
    private void deleteExe(String selectedExe)
    {
      String allExe="";
       System.out.println(selectedExe);
      try
      {
          FileReader fin=null;
          fin = new FileReader("Exe.dat");
          BufferedReader br=new BufferedReader(fin);
          String line;

          while((line=br.readLine())!=null){
            //  System.out.println(line);

          if(!line.equals(selectedExe)){
             allExe+=line+" ";
           }
         }
          fin.close();
          System.out.println(allExe);

          }catch(IOException error){
                    createError("Unable To Read File");
          }

          try{

              FileOutputStream fout;
              fout = new FileOutputStream ("Exe.dat");
              PrintStream p = new PrintStream(fout);
              if(allExe!=null){
                StringTokenizer st=new StringTokenizer(allExe," ");

               while(st.hasMoreTokens()){
               p.println (st.nextToken());
               p.flush();
                  }
               }
               fout.close();
             }catch (IOException error)
              {
               createError ("Unable to write to file");
               }

       }
     private void createError(String msg)
     {
           JOptionPane.showMessageDialog(null,msg,"Error",JOptionPane.ERROR_MESSAGE);
     }

}
